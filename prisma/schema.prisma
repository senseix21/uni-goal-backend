// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                             String                           @id @default(auto()) @map("_id") @db.ObjectId
  firstName                      String
  lastName                       String
  email                          String                           @unique
  phone                          String
  password                       String
  role                           Role                             @default(student)
  survey                         Json[]
  ProfileInformation             ProfileInformation[]
  Counselor                      Counselor[]
  EducationHistory               EducationHistory[]
  WorkHistory                    WorkHistory[]
  ExtraCurricularActivity        ExtraCurricularActivity[]
  Skills                         Skills[]
  LanguageAndOtherQualifications LanguageAndOtherQualifications[]

  @@map("user")
}

// ProfileInformation model
model ProfileInformation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  passportNumber String
  issueDate      DateTime
  expiryDate     DateTime
  gender         String
  maritalStatus  String
  dateOfBirth    DateTime
  placeOfBirth   String
  formalPhoto    String
}

// Counselor model
model Counselor {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  user               User   @relation(fields: [userId], references: [id])
  citizenship        String
  countryOfResidence String
  city               String
  detailAddress      String
  highestEducation   String
  currentEducation   String
  universityName     String
  major              String
  englishProficiency String
  aboutYourself      String
  availability       String
  facebookLink       String
  linkedinLink       String
  formalPhoto        String
  studentCard        String
}

// EducationHistory model
model EducationHistory {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
  levelOfEducation    String
  startOfStudies      DateTime
  expectedPassingYear DateTime
  officialName        String
  groupMajorName      String
  mediumOfInstruction String
  gpa                 Float
}

// WorkHistory model
model WorkHistory {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])
  organization     String
  organizationType String
  position         String
  JobType          JobType
  fromDate         DateTime
  toDate           DateTime
}

model ExtraCurricularActivity {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  activityName      String
  organization      String
  fromDate          DateTime
  toDate            DateTime?
  isCurrentlyActive Boolean
}

// Skills model
model Skills {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  skillNames String[]

  @@map("skills")
}

// LanguageQualifications model
model LanguageAndOtherQualifications {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  ielts       Float?
  toefl       Float?
  duolingo    Float?
  pte         Float?
  gre         Float?
  gmat        Float?
  Others      Float?
  NoneOfThese Boolean?

  @@map("language_and_other_qualifications")
}

enum Role {
  student
  counselor
  admin
  superAdmin
}

enum JobType {
  FullTime
  PartTime
}
